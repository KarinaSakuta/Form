{"version":3,"sources":["assets/img/bg-image1.png","assets/img/bg-image2.png","components/Form.js","components/Wrapper.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","onFirstNameChange","bind","onLastNameChange","onCityChange","onGenderChange","event","this","props","target","value","cityList","map","cityListElement","className","key","firstName","type","onChange","lastName","renderCityOptions","name","Component","Wrapper","state","city","gender","sendDataToConsole","newFirstName","setState","newLastName","newCity","newGender","console","log","src","secondImage","alt","onClick","firstImage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,iLCEtBC,E,YACnB,aAAe,IAAD,8BACZ,+CAEKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBANV,E,+EASII,GAChBC,KAAKC,MAAMP,kBAAkBK,EAAMG,OAAOC,S,uCAG3BJ,GACfC,KAAKC,MAAML,iBAAiBG,EAAMG,OAAOC,S,mCAG9BJ,GACXC,KAAKC,MAAMJ,aAAaE,EAAMG,OAAOC,S,qCAGxBJ,GACbC,KAAKC,MAAMH,eAAeC,EAAMG,OAAOC,S,0CAIvC,OAAOH,KAAKC,MAAMG,SAASC,KAAI,SAACC,GAC5B,OACE,4BAAQC,UAAU,eAAeJ,MAAOG,EAAgBE,KAAMF,EAAgBH,Y,+BAMpF,OACE,yBAAKI,UAAU,QACb,0BAAMA,UAAU,iBACd,2BAAOA,UAAU,eAAjB,iEAEE,2BAAOA,UAAU,mBAAmBJ,MAAOH,KAAKC,MAAMQ,UAAWC,KAAK,OAAOC,SAAUX,KAAKN,qBAE9F,2BAAOa,UAAU,eAAjB,yFAEE,2BAAOA,UAAU,mBAAmBJ,MAAOH,KAAKC,MAAMW,SAAUF,KAAK,OAAOC,SAAUX,KAAKJ,oBAE7F,2BAAOW,UAAU,eAAjB,mFAEE,4BAAQA,UAAU,eAAeI,SAAUX,KAAKH,cAC7CG,KAAKa,sBAGV,2BAAON,UAAU,eAAjB,wEAGA,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,+BACb,2BAAOA,UAAU,eAAjB,SAEE,2BAAOA,UAAU,oBAAoBG,KAAK,QAAQI,KAAK,SAASX,MAAM,IAAIQ,SAAUX,KAAKF,mBAG7F,yBAAKS,UAAU,+BACb,2BAAOA,UAAU,eAAjB,SAEE,2BAAOA,UAAU,oBAAoBG,KAAK,QAAQI,KAAK,SAASX,MAAM,IAAIQ,SAAUX,KAAKF,0B,GAjEvEiB,a,iCCGbC,E,YACnB,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXR,UAAW,QACXG,SAAU,WACVR,SAAU,CAAC,CACTI,IAAK,EACLL,MAAO,SACN,CACDK,IAAK,EACLL,MAAO,WACN,CACDK,IAAK,EACLL,MAAO,SACN,CACDK,IAAK,EACLL,MAAO,SACN,CACDK,IAAK,EACLL,MAAO,WAETe,KAAM,EACNC,OAAQ,GAGV,EAAKC,kBAAoB,EAAKA,kBAAkBzB,KAAvB,gBACzB,EAAKD,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBA9BV,E,+EAiCI0B,GAChBrB,KAAKsB,SAAS,CAAEb,UAAWY,M,uCAGZE,GACfvB,KAAKsB,SAAS,CAAEV,SAAUW,M,mCAGfC,GACXxB,KAAKsB,SAAS,CAAEJ,KAAMM,M,qCAGTC,GACbzB,KAAKsB,SAAS,CAAEH,OAAQM,M,0CAIxBC,QAAQC,IAAI,cAAe3B,KAAKiB,MAAMR,WACtCiB,QAAQC,IAAI,aAAc3B,KAAKiB,MAAML,UACrCc,QAAQC,IAAI,SAAU3B,KAAKiB,MAAMC,MACjCQ,QAAQC,IAAI,WAAY3B,KAAKiB,MAAME,U,+BAInC,OACE,yBAAKZ,UAAU,WACb,yBAAKqB,IAAKC,IAAaC,IAAI,MAAMvB,UAAU,qBAC3C,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CACEE,UAAWT,KAAKiB,MAAMR,UACtBf,kBAAmBM,KAAKN,kBAExBkB,SAAUZ,KAAKiB,MAAML,SACrBhB,iBAAkBI,KAAKJ,iBAEvBQ,SAAUJ,KAAKiB,MAAMb,SACrBc,KAAMlB,KAAKiB,MAAMC,KACjBrB,aAAgBG,KAAKH,aAErBC,eAAkBE,KAAKF,eACvBqB,OAAQnB,KAAKiB,MAAME,SAErB,4BAAQZ,UAAU,kBAAkBwB,QAAS/B,KAAKoB,mBAAlD,2DAEF,yBAAKQ,IAAKI,IAAYF,IAAI,MAAMvB,UAAU,0B,GA9EbQ,aCFhBkB,E,iLAEjB,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,W,GAJyBQ,aCSbmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e6f296f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-image1.45cc7bf5.png\";","module.exports = __webpack_public_path__ + \"static/media/bg-image2.31c20de9.png\";","import React, {Component} from 'react';\r\n\r\nexport default class Form extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.onFirstNameChange = this.onFirstNameChange.bind(this);\r\n    this.onLastNameChange = this.onLastNameChange.bind(this);\r\n    this.onCityChange = this.onCityChange.bind(this);\r\n    this.onGenderChange = this.onGenderChange.bind(this);\r\n  }\r\n\r\n  onFirstNameChange(event) {\r\n    this.props.onFirstNameChange(event.target.value);\r\n  }\r\n\r\n  onLastNameChange(event) {\r\n    this.props.onLastNameChange(event.target.value);\r\n  }\r\n\r\n  onCityChange(event) {\r\n    this.props.onCityChange(event.target.value);\r\n  }\r\n\r\n  onGenderChange(event) {\r\n    this.props.onGenderChange(event.target.value);\r\n  }\r\n\r\n  renderCityOptions() {\r\n    return this.props.cityList.map((cityListElement) => {\r\n        return (\r\n          <option className=\"form__option\" value={cityListElement.key}>{cityListElement.value}</option>\r\n        );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        <form className=\"form__element\">\r\n          <label className=\"form__label\">\r\n            Введите имя:\r\n            <input className=\"form__text-input\" value={this.props.firstName} type=\"text\" onChange={this.onFirstNameChange} />\r\n          </label>\r\n          <label className=\"form__label\">\r\n            Введите фамилию:\r\n            <input className=\"form__text-input\" value={this.props.lastName} type=\"text\" onChange={this.onLastNameChange} />\r\n          </label>\r\n          <label className=\"form__label\">\r\n            Выберите город:\r\n            <select className=\"form__select\" onChange={this.onCityChange}>\r\n              {this.renderCityOptions()}\r\n            </select>\r\n          </label>\r\n          <label className=\"form__label\">\r\n            Выберите пол:\r\n          </label>\r\n          <div className=\"form__label-container\">\r\n            <div className=\"form__label-inner-container\">\r\n              <label className=\"form__label\">\r\n                М\r\n                <input className=\"form__radio-input\" type=\"radio\" name=\"gender\" value=\"1\" onChange={this.onGenderChange}></input>\r\n              </label>\r\n            </div>\r\n            <div className=\"form__label-inner-container\">\r\n              <label className=\"form__label\">\r\n                Ж\r\n                <input className=\"form__radio-input\" type=\"radio\" name=\"gender\" value=\"2\" onChange={this.onGenderChange} />\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Form from './Form';\r\nimport firstImage from '../assets/img/bg-image1.png';\r\nimport secondImage from '../assets/img/bg-image2.png';\r\n\r\nexport default class Wrapper extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      firstName: 'Petya',\r\n      lastName: 'Vasilyev',\r\n      cityList: [{\r\n        key: 1,\r\n        value: 'Minsk',\r\n      }, {\r\n        key: 2,\r\n        value: 'Vitebsk',\r\n      }, {\r\n        key: 3,\r\n        value: 'Brest',\r\n      }, {\r\n        key: 4,\r\n        value: 'Gomel',\r\n      }, {\r\n        key: 5,\r\n        value: 'Grodno',\r\n      }],\r\n      city: 1,\r\n      gender: 1 // 1 - мужчина, 2 - женщина\r\n    };\r\n\r\n    this.sendDataToConsole = this.sendDataToConsole.bind(this);\r\n    this.onFirstNameChange = this.onFirstNameChange.bind(this);\r\n    this.onLastNameChange = this.onLastNameChange.bind(this);\r\n    this.onCityChange = this.onCityChange.bind(this);\r\n    this.onGenderChange = this.onGenderChange.bind(this);\r\n  }\r\n\r\n  onFirstNameChange(newFirstName) {\r\n    this.setState({ firstName: newFirstName });\r\n  }\r\n\r\n  onLastNameChange(newLastName) {\r\n    this.setState({ lastName: newLastName });\r\n  }\r\n\r\n  onCityChange(newCity) {\r\n    this.setState({ city: newCity });\r\n  }\r\n\r\n  onGenderChange(newGender) {\r\n    this.setState({ gender: newGender });\r\n  }\r\n\r\n  sendDataToConsole() {\r\n    console.log('firstName: ', this.state.firstName);\r\n    console.log('lastName: ', this.state.lastName);\r\n    console.log('city: ', this.state.city);\r\n    console.log('gender: ', this.state.gender);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <img src={secondImage} alt=\"img\" className=\"wrapper__picture\"/>\r\n        <div className=\"wrapper__form-container\">\r\n          <Form\r\n            firstName={this.state.firstName}\r\n            onFirstNameChange={this.onFirstNameChange}\r\n\r\n            lastName={this.state.lastName}\r\n            onLastNameChange={this.onLastNameChange}\r\n\r\n            cityList={this.state.cityList}\r\n            city={this.state.city}\r\n            onCityChange = {this.onCityChange}\r\n\r\n            onGenderChange = {this.onGenderChange}\r\n            gender={this.state.gender}\r\n          />\r\n          <button className=\"wrapper__button\" onClick={this.sendDataToConsole}>Отправить</button>\r\n        </div>\r\n        <img src={firstImage} alt=\"img\" className=\"wrapper__picture\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Wrapper from './Wrapper';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Wrapper />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/main.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}